{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP9WarBJsuaZaRtvPZVrwh/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Janvithakur/CODSOFT/blob/main/TIC%20TAC%20TOE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UP9ZdvUfFIF7",
        "outputId": "3c241d79-716c-4f47-96d3-011098dd6759"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  |   |  \n",
            "---------\n",
            "  |   |  \n",
            "---------\n",
            "  |   |  \n",
            "---------\n"
          ]
        }
      ],
      "source": [
        "def print_board(board):\n",
        "    for row in board:\n",
        "        print(\" | \".join(row))\n",
        "        print(\"-\" * 9)\n",
        "\n",
        "def check_winner(board):\n",
        "    # Check rows, columns, and diagonals\n",
        "    lines = [\n",
        "        board[0], board[1], board[2],  # rows\n",
        "        [board[0][0], board[1][0], board[2][0]],  # column 1\n",
        "        [board[0][1], board[1][1], board[2][1]],  # column 2\n",
        "        [board[0][2], board[1][2], board[2][2]],  # column 3\n",
        "        [board[0][0], board[1][1], board[2][2]],  # diagonal \\\n",
        "        [board[0][2], board[1][1], board[2][0]],  # diagonal /\n",
        "    ]\n",
        "\n",
        "    for line in lines:\n",
        "        if line[0] == line[1] == line[2] and line[0] != \" \":\n",
        "            return line[0]\n",
        "    return None\n",
        "\n",
        "def is_draw(board):\n",
        "    return all(cell != \" \" for row in board for cell in row)\n",
        "\n",
        "def tic_tac_toe():\n",
        "    board = [[\" \" for _ in range(3)] for _ in range(3)]\n",
        "    current_player = \"X\"\n",
        "\n",
        "    while True:\n",
        "        print_board(board)\n",
        "        row = int(input(f\"Player {current_player}, enter row (0-2): \"))\n",
        "        col = int(input(f\"Player {current_player}, enter column (0-2): \"))\n",
        "\n",
        "        if board[row][col] == \" \":\n",
        "            board[row][col] = current_player\n",
        "            winner = check_winner(board)\n",
        "\n",
        "            if winner:\n",
        "                print_board(board)\n",
        "                print(f\"Player {winner} wins!\")\n",
        "                break\n",
        "            if is_draw(board):\n",
        "                print_board(board)\n",
        "                print(\"It's a draw!\")\n",
        "                break\n",
        "\n",
        "            current_player = \"O\" if current_player == \"X\" else \"X\"\n",
        "        else:\n",
        "            print(\"Cell already taken, try again!\")\n",
        "\n",
        "if __name__== \"__main__\":\n",
        "    tic_tac_toe()"
      ]
    }
  ]
}